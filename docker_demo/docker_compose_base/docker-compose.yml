# 官方参考文档:https://docs.docker.com/compose/compose-file/compose-file-v3/

version: "3.8"
services:
  mysql:  # 容器名称自动生成为:docker_compose_base-mysql-1
    # Specify the image to start the container from. Can either be a repository/tag or a partial image ID.
    image: mysql:5.7
    # Override the default command.
    command:
      [ "mysqld" ]
    # Expose ports.
    # 对应:docker run -p 
    ports:
      - "3306:3306"
    # Add environment variables. You can use either an array or a dictionary. Any boolean values (true, false, yes, no) need to be enclosed in quotes to ensure they are not converted to True or False by the YML parser.
    # 对应:docker run -e
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    # Mount host paths or named volumes, specified as sub-options to a service.
    # You can mount a host path as part of a definition for a single service, and there is no need to define it in the top level volumes key.
    # But, if you want to reuse a volume across multiple services, then define a named volume in the top-level volumes key. Use named volumes with services, swarms, and stack files.
    volumes:
      # Specify an absolute path mapping
      # 对应:docker run -v
      - /root/mysqldatas:/var/lib/mysql
    # Networks to join, referencing entries under the top-level networks key.
    networks:
      - overlay

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.11.2
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
    volumes:
      - data01:/usr/share/elasticsearch/data
    # Specify a custom container name, rather than a generated default name.
    container_name:
      obj_name
    networks:
      - overlay

  kibana:
    image: docker.elastic.co/kibana/kibana:7.11.2
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'  # kibana默认值
    # Express dependency between services.
    depends_on:
      - mysql
      - elasticsearch
    networks:
      - overlay

# creates a volume
# Inspect a volume:`docker volume inspect docker_compose_base_data01`
volumes:
  data01:
  data02:

# Specify custom networks🔗
networks:
  overlay:
#services:
#  web:
#    build: .
#    ports:
#      - "8000:8000"
#  db:
#    image: postgres
#    ports:
#      - "8001:5432"

#When you run docker compose up, the following happens:
#* A network called myapp_default is created.
#* A container is created using web’s configuration. It joins the network myapp_default under the name web.
#* A container is created using db’s configuration. It joins the network myapp_default under the name db.